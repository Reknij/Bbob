using Bbob.Main.Configuration;
using Bbob.Main.PluginManager;
using Bbob.Plugin;
using ConsoleHelper = Bbob.Shared.SharedLib.ConsoleHelper;

namespace Bbob.Main.Cli;

public class Dev : Command
{
    public new static string Name => "dev";
    public new static string Help => "Generate files for development.\n" +
    // "<option>:\n" +
    // "--plugins | -p : list the loaded plugins. It is processed plugins list.\n\n" +
    "Use:\n" +
    "// dev";

    public string Distribution => Path.Combine(Environment.CurrentDirectory, "dist_dev");
    public bool isConcise { get; set; } = false;
    public string ArticlesFolder => Path.Combine(Environment.CurrentDirectory, "articles_dev");

    public Dev()
    {
        if (Directory.Exists(Distribution)) Shared.SharedLib.DirectoryHelper.DeleteDirectory(Distribution);
        if (Directory.Exists(ArticlesFolder)) Shared.SharedLib.DirectoryHelper.DeleteDirectory(ArticlesFolder);
        Directory.CreateDirectory(Distribution);
        Directory.CreateDirectory(ArticlesFolder);

        var config = ConfigManager.MainConfig;
        config.distributionPath = "./dist_dev/";
        config.useHashName = false;
        config.blogName = "Development blogs";
        config.author = "Dev";
        config.description = config.about = "This blog are generated by `dev` command.";
        InitializeBbob.Initialize(InitializeBbob.InitializeOptions.All);
        InitializeBbob.registerDataAgain();
    }
    public override bool Process()
    {
        var animes = new Anime[]
            {
                new Anime("Cat", "Meow", "Fish", "eat the fish"),
                new Anime("Dog", "Woof", "Cat", "play with owner"),
                new Anime("Chicken", "Cluck", "Worm", "Eat the Worm"),
                new Anime("Pig", "oink", "Radish", "Sleeping"),
                new Anime("Parrot", "Fuck you idiot!", "Worm", "Say `fuck you` to you"),
                new Anime("Horse", "Neigh", "Grass", "Running."),
                new Anime("Donkey", "Hee-haw", "Grass", "Say hee-haw"),
                new Anime("Monkey", "Whoop", "Banana", "Eat the banana"),
                new Anime("Mosquitoes", "Whine", "Blood", "Suck blood"),
                new Anime("Wolf", "Woof", "Cat", "Eat the cat"),
                new Anime("Panda", "...", "Bamboo", "Eat the bamboo"),
                new Anime("Fish", "Pops", "Fish", "Eat the fish"),
                new Anime("Fox", "...", "Apple", "Running"),
                new Anime("Duck", "Quack", "Fish", "Eat the fish"),
                new Anime("Goose", "Quack", "Fish", "Eat the fish"),
            };
        foreach (var anime in animes)
        {
            var file = Path.Combine(ArticlesFolder, $"{anime.name}.md");
            File.WriteAllText(file, GenerateFromTemplate(anime));
        }
        return true;

    }

    public void ProcessAfterGenerated()
    {
        var tsDist = Path.Combine(Distribution, "Bbob.ts");
        var tsFile = Path.Combine(AppContext.BaseDirectory, "JSApi", "Bbob.ts");
        File.Copy(tsFile, tsDist);

        Shared.SharedLib.DirectoryHelper.DeleteDirectory(ArticlesFolder);

        var exclude = new string[]
        {
            "bbob.js",
            "Bbob.ts",
            "bbob-assets"
        };
        if (isConcise)
        {
            var contents = Directory.GetFiles(Distribution).ToList();
            contents.AddRange(Directory.GetDirectories(Distribution));

            foreach (var content in contents)
            {
                if (File.Exists(content))
                {
                    if (exclude.Contains(Path.GetFileName(content))) continue;
                    else File.Delete(content);
                }
                if (Directory.Exists(content))
                {
                    if (exclude.Contains(new DirectoryInfo(content).Name)) continue;
                    else Shared.SharedLib.DirectoryHelper.DeleteDirectory(content);
                }
            }
        }
    }

    record struct Anime(string name, string sound, string favoriteFood, string hobby);

    int day = 1;
    int month = 1;
    private string GenerateFromTemplate(Anime anime)
    {
        string name = anime.name;
        string sound = anime.sound;
        string favoriteFood = anime.favoriteFood;
        string hobby = anime.hobby;
        if (month < 12 && day % 2 == 0) month++;
        return
        "---\n" +
        $"title: About me, a {name}.\n" +
        $"date: 2022-{month}-{day++} 14:00:43\n" +
        "categories:\n" +
        "   - Dev\n" +
        "tags:\n" +
        "   - Anime\n" +
        "---\n" +
        $"# I am {name}.\n" +
        "{sound}~ {sound}~ {sound}~ {sound}~ {sound}~\n" +
        "## Description\n" +
        $"I am {name}. {sound}, i am talking something important, {sound}. Listen, {sound}! Listen, {sound}! And Listen, {sound}!!!\n" +
        "# What is my favorite food?\n" +
        $"I love to eat {favoriteFood}. {sound}. May be you dont like it, {sound}. But...is not important for me {sound}. {favoriteFood} is best in the world! {sound}!\n" +
        "# What is my hobby?\n" +
        $"{sound}, Ok...My hobby is {hobby}! {sound}~ What's the matter {sound}, why are you so surprised, {sound}. Okay, I know {hobby} isn't exactly a hobby {sound}, but do I need your attention? {sound}???\n" +
        "# Another hobby\n" +
        $"I love to sing! {sound}~ Do you want to hear me sing {sound}? \n\nOf course you want! {sound}~\n" +
        $"# Start to sing the song `Song of {sound}`\n" +
        $"{sound}, {sound} {sound}, {sound} {sound} {sound} {sound} {sound} {sound}~\n\n" +
        $"{sound}, {sound} {sound}, {sound} {sound} {sound} {sound} {sound} {sound}~\n\n" +
        $"{sound} {sound}, {sound} {sound} {sound} {sound}, {sound} {sound}, {sound} {sound} {sound} {sound}, {sound} {sound} {sound} {sound} {sound}~\n" +
        "# The end.\n" +
        $"Love me sing? {sound}~\n\nOf course you love! {sound}~\n\nBye~ {sound}~ Love you forever~\n";
    }
}